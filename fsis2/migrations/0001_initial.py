# -*- coding: utf-8 -*-
# Generated by Django 1.9.13 on 2019-01-22 16:01
from __future__ import unicode_literals

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BuildDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('build_date', models.DateField(editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='CWTs_Applied',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fs_tagging_event_id', models.IntegerField()),
                ('cwt', models.CharField(db_index=True, max_length=6)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prj_cd', models.CharField(max_length=13)),
                ('year', models.IntegerField(db_index=True)),
                ('fs_event', models.IntegerField(unique=True)),
                ('lotsam', models.CharField(blank=True, max_length=8, null=True)),
                ('event_date', models.DateTimeField(blank=True, null=True)),
                ('clipa', models.CharField(blank=True, max_length=3, null=True)),
                ('fish_age', models.IntegerField()),
                ('stkcnt', models.IntegerField()),
                ('fish_wt', models.FloatField(blank=True, null=True)),
                ('record_biomass_calc', models.FloatField(blank=True, null=True)),
                ('reartem', models.FloatField(blank=True, null=True)),
                ('sitem', models.FloatField(blank=True, null=True)),
                ('transit_mortality_count', models.IntegerField(blank=True, null=True)),
                ('dd_lat', models.FloatField()),
                ('dd_lon', models.FloatField()),
                ('geom', django.contrib.gis.db.models.fields.PointField(help_text='Represented as (longitude, latitude)', srid=4326)),
                ('popup_text', models.CharField(max_length=1500)),
                ('development_stage', models.IntegerField(choices=[(99, 'Unknown'), (10, 'Egg (unknown stage)'), (12, 'Eyed Eggs'), (31, 'Fry (1-2 months)'), (32, 'Fingerling (3-9 months)'), (50, 'Juvenile / Adult (unknown age)'), (51, 'Yearling (10-19 months)'), (52, 'Sub-adult (>= 20 months, but immature)'), (53, 'Adult (mature)'), (81, 'Sac Fry (0-1 month)')], default=99)),
                ('transit', models.CharField(blank=True, choices=[('ATV', 'All-terrain vehicle'), ('BOAT', 'Boat'), ('PLANE', 'Fixed wing Airplane'), ('TUG', 'Great Lakes Tug'), ('HELICOPTER', 'Helicopter'), ('INCUBATOR', 'In-stream incubation'), ('BACKPACK', 'Personal backpack'), ('SNOWMOBILE', 'Snowmobile'), ('TRUCK', 'Truck'), ('UNKNOWN', 'Unknown')], default='UNKNOWN', max_length=20, null=True)),
                ('stocking_method', models.CharField(blank=True, choices=[('AERIAL DROP', 'Areal Drop'), ('ICE', 'Under Ice'), ('SUBMERGED', 'Submerged'), ('SUBSURFACE', 'Subsurface'), ('SURFACE', 'surface'), ('UNKNOWN', 'Unknown')], default='UNKNOWN', max_length=20, null=True)),
                ('stocking_purpose', models.CharField(blank=True, choices=[('UNKN', 'Unknown'), ('A', 'Rehabilitation'), ('AC', 'Rehabilitation/Supplemental'), ('AD', 'Rehabilitation/Research'), ('AE', 'Rehabilitation/Assessment'), ('B', 'Introduction'), ('C', 'Supplemental'), ('D', 'Research'), ('DI', 'Research/Re-Introduction'), ('EG', 'Assessment/Put-Grow-and-Take'), ('EI', 'Assessment/Re-introduction'), ('F', 'Put-and-Take'), ('G', 'Put-Grow-and Take'), ('I', 'Re-introduction')], default='UNKNOWN', max_length=4, null=True)),
            ],
            options={
                'ordering': ['-event_date'],
            },
        ),
        migrations.CreateModel(
            name='Lake',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lake', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Lake',
            },
        ),
        migrations.CreateModel(
            name='Lot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fs_lot', models.CharField(max_length=10)),
                ('spawn_year', models.IntegerField()),
                ('rearloc', models.CharField(max_length=30)),
                ('rearloc_nm', models.CharField(max_length=30)),
                ('proponent_type', models.CharField(choices=[('CFIP', 'CFIP'), ('OMNR', 'OMNR'), ('PRIVATE', 'Private Hatchery'), ('UNKNOWN', 'Unknown')], default='OMNR', max_length=10)),
            ],
            options={
                'ordering': ['-spawn_year'],
            },
        ),
        migrations.CreateModel(
            name='ManagementUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=25)),
                ('slug', models.SlugField(blank=True, editable=False, unique=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                ('mu_type', models.CharField(choices=[('ltrz', 'Lake Trout Rehabilitation Zone'), ('qma', 'Quota Management Area')], default='qma', max_length=10)),
                ('lake', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='fsis2.Lake')),
            ],
            options={
                'ordering': ['mu_type', 'label'],
            },
        ),
        migrations.CreateModel(
            name='Proponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abbrev', models.CharField(max_length=7, unique=True)),
                ('proponent_name', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ['proponent_name'],
            },
        ),
        migrations.CreateModel(
            name='Readme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(editable=False)),
                ('comment', models.TextField()),
                ('initials', models.CharField(max_length=4)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('species_code', models.IntegerField(unique=True)),
                ('common_name', models.CharField(max_length=30)),
                ('scientific_name', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'ordering': ['species_code'],
            },
        ),
        migrations.CreateModel(
            name='StockingSite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fsis_site_id', models.IntegerField(unique=True)),
                ('site_name', models.CharField(max_length=50)),
                ('stkwby', models.CharField(max_length=30)),
                ('stkwby_lid', models.CharField(max_length=15)),
                ('utm', models.CharField(max_length=20)),
                ('grid', models.CharField(max_length=4)),
                ('dd_lat', models.FloatField()),
                ('dd_lon', models.FloatField()),
                ('basin', models.CharField(max_length=15)),
                ('deswby_lid', models.CharField(max_length=30)),
                ('deswby', models.CharField(max_length=30)),
                ('popup_text', models.CharField(max_length=1500)),
                ('geom', django.contrib.gis.db.models.fields.PointField(help_text='Represented as (longitude, latitude)', srid=4326)),
            ],
            options={
                'ordering': ['site_name'],
            },
        ),
        migrations.CreateModel(
            name='Strain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sto_code', models.CharField(max_length=5)),
                ('strain_code', models.CharField(max_length=5)),
                ('strain_name', models.CharField(max_length=20)),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fsis2.Species')),
            ],
            options={
                'ordering': ['species', 'strain_name'],
            },
        ),
        migrations.CreateModel(
            name='TaggingEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fs_tagging_event_id', models.IntegerField(unique=True)),
                ('retention_rate_pct', models.FloatField(blank=True, null=True)),
                ('retention_rate_sample_size', models.IntegerField(blank=True, null=True)),
                ('retention_rate_pop_size', models.IntegerField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('tag_type', models.IntegerField(choices=[(1, 'Streamer'), (2, 'Tubular Vinyl'), (5, 'Anchor'), (6, 'Coded Wire'), (17, 'Sequential_CWT')], db_index=True, default=6)),
                ('tag_position', models.IntegerField(choices=[(1, 'Flesh of Back'), (2, 'Operculum'), (3, 'Posterior Dorsal Fins'), (4, 'Snout')], default=4)),
                ('tag_origins', models.CharField(choices=[('CFP', 'Community Fisheries Involvement Program(CFIP)'), ('MNR', 'Ontario Ministry of Natural Resources')], default='MNR', max_length=3)),
                ('tag_colour', models.CharField(choices=[('BLK', 'Black'), ('BLU', 'Blue'), ('GRN', 'Green'), ('NON', 'Colourless'), ('OTH', 'Other'), ('UNK', 'Unknown'), ('YEL', 'Yellow')], default='NON', max_length=3)),
                ('stocking_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fsis2.Event')),
            ],
        ),
        migrations.AddField(
            model_name='lot',
            name='proponent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fsis2.Proponent'),
        ),
        migrations.AddField(
            model_name='lot',
            name='species',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fsis2.Species'),
        ),
        migrations.AddField(
            model_name='lot',
            name='strain',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fsis2.Strain'),
        ),
        migrations.AddField(
            model_name='event',
            name='lot',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fsis2.Lot'),
        ),
        migrations.AddField(
            model_name='event',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fsis2.StockingSite'),
        ),
        migrations.AddField(
            model_name='cwts_applied',
            name='tagging_event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fsis2.TaggingEvent'),
        ),
    ]
